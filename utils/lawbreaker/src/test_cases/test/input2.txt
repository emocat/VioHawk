map = "SanFrancisco111";

car_model = "Lincoln2017MKZ (Apollo 6.0)";
car_color = green;
ego_init_position = (553090.05225720361, 4182687.8, +10.1246);   //default coordinate frame is ENU    10.2880001068115,
// ego_heading = 90 deg;
//ego_init_state = (ego_init_position, ego_heading);
ego_init_state = (ego_init_position);
ego_target_position = (552898.9957, 4182687.8989561526); //default coordinate frame is ENU    10.1325969696045,
ego_target_state = (ego_target_position);
vehicle_type = (car_model, car_color);
ego_vehicle = AV(ego_init_state, ego_target_state, vehicle_type);
// ego_vehicle = AV(ego_init_state, ego_target_state);

heading1 = 10 deg related to ego_vehicle;
npc_init_state = ("lane_39"->50.0, heading1, 1.0);//the initial position is the start point of lane 1, the orientation of the vehicle is along with the lane direction, and the initial speed is 1.5m/s
motion = U(("lane_39"->50.0, , 2.0));
npc1_type = "SUV1";
npc1 = Vehicle(npc_init_state, motion, , (npc1_type));

heading2 = 40 deg related to npc1;
npc_init_state2 = ("lane_38"->0.0, heading2 ,2.0);
npc_state2 = (("lane_755"->0.0), ("lane_41"->0));
npc_target_state2 = ("lane_41"->50.0);
npc2_type = "SUV";
npc2 =Vehicle(npc_init_state2, Waypoint(npc_state2), npc_target_state2, (npc2_type));
//heading = 180 deg related to EGO;
// heading = 3.14 rad related to "lane_41"->50;
//heading3 = 3.14 rad related to npc2;
heading3 = 0.5pi rad related to npc2;
npc_init_state3 = ("lane_779"->0.0, heading3, 0.0);
npc3 = Vehicle(npc_init_state3);

npc = {npc1, npc2, npc3};

p_init =((553080.05225720361, 4182687.8), , 0.5);
p_heading = 0.5pi rad related to EGO;
p_end = ((553050.05225720361, 4182687.8), p_heading, 0.0);
p_waypoint=(((553070.05225720361, 4182687.8), , 0.4),((553060.05225720361, 4182687.8), , 0.3),((553055.05225720361, 4182687.8), , 0.1));
p_motion = W(p_waypoint);
p_motion1 = U(p_init);
people=Pedestrian(p_init,p_motion, p_end);
people1=Pedestrian(p_init,p_motion1, p_end);

npc_2 = {npc1, npc2};
speed_range = (0,20);
speed_limit = SpeedLimit(".5", speed_range);
i1 = Intersection(1, 1, 0, 1);
traffic = {i1,speed_limit};

scenario0 = CreateScenario{load(map);
			        ego_vehicle;
			        npc; // no other vehicles;
			        {people}; // no pedestrians;
			        {}; // no obstacles;
			        {}; // default environment
			        traffic; // no traffic constraints
};



scenario1 = CreateScenario{load(map);
			        ego_vehicle;
			        npc_2; // no other vehicles;
			        {people, people1}; // no pedestrians;
			        {}; // no obstacles;
			        {}; // default environment
			        traffic; // no traffic constraints
};

Trace trace = EXE(scenario0);
Trace trace1 = EXE(scenario1);


ego_vehicle_state= trace[ego];
npc_vehicle1= trace[perception][npc1];
npc_vehicle1_truth= trace[truth][npc1];
npc_vehicle2 = trace[perception][npc2];
npc_vehicle2_truth = trace[truth][npc2];
npc_vehicle3= trace[perception][npc3];
npc_vehicle3_truth =  trace[truth][npc3];
//pedestrian_truth = trace[perception][pedestrian];
//pedestrian_truth = trace[truth][pedestrian];

// assertion related to npc_vehicle1
dis1 = dis(ego_vehicle_state, npc_vehicle1_truth);
error1 = diff(npc_vehicle1, npc_vehicle1_truth);
perception_detection1 = dis1<=50 & error1 <= 0.1;
//p_dis1 = dis(ego_vehicle_state, npc_vehicle1)
trace |=G perception_detection1;// perception statement
trace1 |=G perception_detection1;// perception statement
trace |= G dis1<=50 & error1 <= 0.1 & dis(ego_vehicle_state, npc_vehicle1) >= 0.1;
trace1 |= G dis1<=50 & error1 <= 0.1 & dis(ego_vehicle_state, npc_vehicle1) >= 0.1;

dis2 = dis(ego_vehicle_state, npc_vehicle2_truth);
error2 = diff(npc_vehicle2, npc_vehicle2_truth);
//p_dis2 = dis(ego_vehicle_state, npc_vehicle2)
perception_detection3 = dis2<= 50 & error2 <= 0.8;
trace |= G perception_detection3;// perception statement
trace1 |= G perception_detection3;// perception statement
trace |= G dis2<=50 & error2 <= 0.1 & dis(ego_vehicle_state, npc_vehicle2) >= 0.1;
trace1 |= G dis2<=50 & error2 <= 0.1 & dis(ego_vehicle_state, npc_vehicle2) >= 0.1;

//traffic_perception = trace[perception][traffic];
//traffic_truth = trace[truth][traffic];
traffic_statement = trace[perception][traffic]==trace[truth][traffic];
trace |= G traffic_statement;
//trace1 |= G traffic_statement;

perception_dis_npc1 = dis(ego_vehicle_state, npc_vehicle1_truth);
perception_dis_npc2 = dis(ego_vehicle_state, npc_vehicle2_truth);
//safe_statement1 = perception_detection1 & perception_dis_npc1 >= 2.0;
//safe_statement2 = perception_dis_npc1 >= 2.0;
// trace |= G safe_statement1;
//trace |= G safe_statement2;
//trace |= G safe_statement1 & safe_statement2;

//trace |=G perception_detection1 & dis(ego_vehicle_state, npc_vehicle1)>= 0.1; //safety statement

//perception_detection = dis1<=50 & error1 <= 0.1 ;
//trace |= G perception_detection & dis(ego_vehicle_state, npc_vehicle1)>= 0.1;


// intersection assertion
//intersection_assertion=(trace[1][perception][traffic]==trace[1][truth][traffic]
//	&trace[1][traffic]==red)->(~norm((100,100))U(trace[1][perception][traffic]==trace[1][truth][traffic]
//	&trace[1][traffic]==green));
//trace |=G intersection_assertion;
// speed constraint assertion
//speed_constraint_assertion=(trace[1][perception][traffic]==trace[1][truth][traffic]
//	&trace[1][traffic]==(100,200)&120<trace[1][traffic][0])
//	->F[0,2]~120<trace[1][traffic][0];
//trace |=G speed_constraint_assertion;
